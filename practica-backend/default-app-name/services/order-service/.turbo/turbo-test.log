[32morder-service:test[0m: cache hit, replaying output [2mfb5b940a01f380e4[0m
[32morder-service:test: [0m
[32morder-service:test: [0m> order-service@0.0.2 test
[32morder-service:test: [0m> PRETTY_PRINT=true jest --forceExit --verbose=true --runInBand
[32morder-service:test: [0m
[32morder-service:test: [0mglobal-setup: 9.818ms
[32morder-service:test: [0m[1660823259515] [32mINFO[39m (11025 on MadHatter.local): [36mServer is about to listen to port 0[39m
[32morder-service:test: [0m[1660823259557] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to add new Order {
[32morder-service:test: [0m  userId: 1,
[32morder-service:test: [0m  productId: 2,
[32morder-service:test: [0m  deliveryAddress: '123 Main St, New York, NY 10001',
[32morder-service:test: [0m  paymentTermsInDays: 30
[32morder-service:test: [0m}[39m
[32morder-service:test: [0m  console.log
[32morder-service:test: [0m    In real production code I will really fire metrics { name: 'error', labels: { errorName: 'invalid-order' } }
[32morder-service:test: [0m
[32morder-service:test: [0m      at Object.fireMetric (../../libraries/error-handling/index.ts:100:13)
[32morder-service:test: [0m
[32morder-service:test: [0m  console.log
[32morder-service:test: [0m    In real production code I will really fire metrics { name: 'error', labels: { errorName: 'user-doesnt-exist' } }
[32morder-service:test: [0m
[32morder-service:test: [0m      at Object.fireMetric (../../libraries/error-handling/index.ts:100:13)
[32morder-service:test: [0m
[32morder-service:test: [0m[1660823259772] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to add new Order {
[32morder-service:test: [0m  userId: 1,
[32morder-service:test: [0m  productId: 2,
[32morder-service:test: [0m  deliveryAddress: '123 Main St, New York, NY 10001',
[32morder-service:test: [0m  paymentTermsInDays: 30
[32morder-service:test: [0m}[39m
[32morder-service:test: [0m[1660823259782] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to get user by id 2[39m
[32morder-service:test: [0m[1660823259794] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to add new Order {
[32morder-service:test: [0m  userId: 1,
[32morder-service:test: [0m  deliveryAddress: '123 Main St, New York, NY 10001',
[32morder-service:test: [0m  paymentTermsInDays: 30
[32morder-service:test: [0m}[39m
[32morder-service:test: [0m[1660823259795] [31mERROR[39m (11025 on MadHatter.local): [36mValidation failed[39m
[32morder-service:test: [0m[1660823259822] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to add new Order {
[32morder-service:test: [0m  userId: 7,
[32morder-service:test: [0m  productId: 1,
[32morder-service:test: [0m  deliveryAddress: '123 Main St, New York, NY 10001',
[32morder-service:test: [0m  paymentTermsInDays: 30
[32morder-service:test: [0m}[39m
[32morder-service:test: [0mPASS test/add-order.test.ts (4.75 s)
[32morder-service:test: [0m  /api
[32morder-service:test: [0m    POST /orders
[32morder-service:test: [0m      âœ“ When adding a new valid order, Then should get back approval with 200 response (245 ms)
[32morder-service:test: [0m      âœ“ When adding a new valid order, Then should be able to retrieve it (24 ms)
[32morder-service:test: [0m      âœ“ When adding an order without specifying product, stop and return 400 (27 ms)
[32morder-service:test: [0m      âœ“ When the user does not exist, return 404 response (7 ms)
[32morder-service:test: [0m      âœŽ todo When a new order failed, an invalid-order error was handled
[32morder-service:test: [0m      âœŽ todo When a new valid order was added, then order-added metric was fired
[32morder-service:test: [0m      âœŽ todo When the user service is down, then order is still added successfully
[32morder-service:test: [0m
[32morder-service:test: [0m[1660823259825] [31mERROR[39m (11025 on MadHatter.local): [36mThe user 7 doesnt exist[39m
[32morder-service:test: [0m[1660823260767] [32mINFO[39m (11025 on MadHatter.local): [36mServer is about to listen to port 0[39m
[32morder-service:test: [0m[1660823260796] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to add new Order {
[32morder-service:test: [0m  userId: 1,
[32morder-service:test: [0m  productId: 2,
[32morder-service:test: [0m  deliveryAddress: '123 Main St, New York, NY 10001',
[32morder-service:test: [0m  paymentTermsInDays: 30
[32morder-service:test: [0m}[39m
[32morder-service:test: [0m[1660823260923] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to get user by id 3[39m
[32morder-service:test: [0m[1660823260937] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to get user by id -1[39m
[32morder-service:test: [0mPASS test/get-order.test.ts (1.073 s)
[32morder-service:test: [0m  /api
[32morder-service:test: [0m    GET /order
[32morder-service:test: [0m      âœ“ When asked for an existing order, Then should retrieve it and receive 200 response (165 ms)
[32morder-service:test: [0m      âœ“ When asked for an non-existing order, Then should receive 404 response (6 ms)
[32morder-service:test: [0m
[32morder-service:test: [0m[1660823261765] [32mINFO[39m (11025 on MadHatter.local): [36mServer is about to listen to port 0[39m
[32morder-service:test: [0m[1660823261784] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to add new Order {
[32morder-service:test: [0m  userId: 1,
[32morder-service:test: [0m  productId: 2,
[32morder-service:test: [0m  deliveryAddress: '123 Main St, New York, NY 10001',
[32morder-service:test: [0m  paymentTermsInDays: 30
[32morder-service:test: [0m}[39m
[32morder-service:test: [0m[1660823261908] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to delete order 4[39m
[32morder-service:test: [0m[1660823261917] [32mINFO[39m (11025 on MadHatter.local): [36mOrder API was called to get user by id 4[39m
[32morder-service:test: [0mPASS test/delete-order.test.ts (0.974 s)
[32morder-service:test: [0m  /api
[32morder-service:test: [0m    DELETE /order
[32morder-service:test: [0m      âœ“ When deleting an existing order, Then it should NOT be retrievable (159 ms)
[32morder-service:test: [0m
[32morder-service:test: [0m----------------------------------------|---------|----------|---------|---------|-------------------
[32morder-service:test: [0mFile                                    | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
[32morder-service:test: [0m----------------------------------------|---------|----------|---------|---------|-------------------
[32morder-service:test: [0mAll files                               |   94.77 |    91.89 |   83.33 |   94.77 |                   
[32morder-service:test: [0m order-service                          |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  config.ts                             |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m order-service/data-access              |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  db-connection.ts                      |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m order-service/data-access/config       |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  config.js                             |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m order-service/data-access/repositories |   95.91 |      100 |      80 |   95.91 |                   
[32morder-service:test: [0m  order-model.ts                        |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  order-repository.ts                   |      90 |      100 |      75 |      90 | 19-20             
[32morder-service:test: [0m order-service/domain                   |     100 |     92.3 |     100 |     100 |                   
[32morder-service:test: [0m  new-order-use-case.ts                 |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  order-schema.ts                       |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  payment-terms-service.ts              |     100 |       50 |     100 |     100 | 4                 
[32morder-service:test: [0m order-service/entry-points/api         |   97.67 |     87.5 |     100 |   97.67 |                   
[32morder-service:test: [0m  routes.ts                             |     100 |      100 |     100 |     100 |                   
[32morder-service:test: [0m  server.ts                             |   96.47 |       80 |     100 |   96.47 | 40,74-75          
[32morder-service:test: [0m order-service/test                     |   62.79 |      100 |      40 |   62.79 |                   
[32morder-service:test: [0m  test-helpers.ts                       |   62.79 |      100 |      40 |   62.79 | 5-14,20-22,24-26  
[32morder-service:test: [0m----------------------------------------|---------|----------|---------|---------|-------------------
[32morder-service:test: [0mTest Suites: 3 passed, 3 total
[32morder-service:test: [0mTests:       3 todo, 7 passed, 10 total
[32morder-service:test: [0mSnapshots:   0 total
[32morder-service:test: [0mTime:        6.999 s
[32morder-service:test: [0mRan all test suites.
[32morder-service:test: [0mForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
